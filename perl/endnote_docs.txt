                     ENDNOTE.AWK and ENDNOTE.PL

      A Practical Method for Handling Endnotes in Text Files
                   by Eric Pement (22 November 2023)

   Academic writers often need note documentation in their files. In the
editing process, it's nice to move, add, or delete paragraphs with note
numbers without manually renumbering them as sentences and paragraphs are
moved. Word processors like Microsoft Word permit users to edit note
references, which are automatically renumbered when moved or deleted. Is
something like this available to users with text editors like vim, Emacs,
Notepad++, or Visual Studio Code?

   Yes! With your preferred plain text editor, you can create a source
file with unnumbered notes and move them around, adding or deleting them
without worry. At print time, the source document is passed through a
reformatting script which assigns sequential numbers to the note marks,
gathers the notes themselves, and moves them to the end of the document
where they are collected and listed in order. Endnotes can be separated
by double spacing or single spacing, whichever you prefer.

Vocabulary:

   Note references are the digits which often appear as smaller, superior
   numbers, but which may appear in '[square brackets]' in the text body.
   In plain text, superior figures are not available, so our note
   references will go in square brackets.

   Notes are the documentation items themselves, which generally list an
   author, title, year of publication, page numbers, etc., but which may
   be words of explanation or abbreviated secondary references.

   These terms are special: Note Marker, Note Body, and Note Block.
 
   Note Markers are things which become note references after processing.

   A Note Body is a note, prefixed by "#." or "##.", matching the
   corresponding Note Marker above it. A Note Body can contain full
   sentences or paragraphs. It can also be a single line.

   A Note Block is a group of sequential Note Bodies, delimited before
   and after or else above and below by 2 consecutive square brackets,
   "[[" and "]]".

A. How to Format Your Document
------------------------------

   Within the paragraph, mark each future note reference by a Note
Marker, as [\#] or [\##], only OMIT THE BACKSLASH when typing it. Use a
left square bracket "[", one or two pound signs "#", and a right square
bracket "]". The pound signs inside the Note Marker will be converted to
numbers [#], [#], etc. when the file is processed. Pound signs that are
not in square brackets will not be changed.

[[
##. You can use 1 to 4 pound signs. The number of pound signs has no
bearing on how the numbers will look when the document is formatted.
Numbering begins with 1, unless an option switch is used.

If you expect to have less than 10 notes, use just one pound sign. If you
expect to have less than 100, use two: [##]. Use 3 or 4 pound signs only
for documents with hundreds of citations.

##. Pound signs wrapped in square brackets like [##] become automatically
incremented note references in the main text. But inside Note Blocks,
this pattern is ignored and automatic numbering does not occur.
]]

   Below any paragraph with Note Markers, add the documentation items in
the same order. Predix each note with "#." or "##." to match its
corresponding Note Marker. The notes for that paragraph go inside a Note
Block delimited by '[[' and ']]', which may be in any of these four
locations:

   (a) WITHIN THE PARAGRAPH. This format works well if your reference is
very short.[##] Confirm that the square brackets "[[" and "]]" will appear
[[ #. Short, like one-line short. ]]
as the first and last characters of the line. In other words, a Note
Block can literally be INSIDE a paragraph of body text. It does not have
to be outside or after the paragraph.

   (b) AT THE END OF THE PARAGRAPH. This format works well if you like to
keep the note documentation immediately below the paragraph which refers
to it.[##] You do not need a blank line between the paragraph and the
Note Block. The line below is an example.
[[ ##. Here, there is no blank line after the paragraph. ]]

   (c) AFTER THE PARAGRAPH. If you should reformat the paragraph above,
the "[[" delimiters from the Note Block would very likely be pulled up at
the end of the word "example." This is bad, because ENDNOTE expects the
"[[" and "]]" to be the first and last visible characters on a line.[##]
To overcome the consequences of a "reformat paragraph" command, add a
blank line after the paragraph and put the Note Block below it. ENDNOTE
deletes the blank line automatically.

[[
##. ENDNOTE allows spaces or tabs to precede or follow the "[[" and "]]"
delimiters, but spaces and tabs are invisible. For the double square
brackets to work as delimiters, no visible characters can precede or
follow them.
]]

   (d) FAR BELOW THE PARAGRAPH. You may put the Note Block several
paragraphs after the Note Markers. This defeats the main idea, which is
to keep the Note Markers and the Note Block close to each other during
the editing process, but you can do it if you want.

   I normally follow in example (c), with the Note Block one paragraph
below the Note Markers, avoiding unintentional paragraph reform. You can
break this rule if the situation requires it.

B. Details on Note Blocks
-------------------------

   Inside a Note Block---a text block wrapped in "[[" and "]]"
markers---each Note Body begins with optional whitespace (spaces or
tabs), followed by 1 to 4 pound signs, followed by a period. That period
is very important, because if it is missing, ENDNOTE will not consider it
a new item for numbering.

   The optional whitespace before each Note Body means you do not need to
begin the "##." flush left if you don't like it. You can indent if you
want to.[##]

[[
    ##.  As you can see here.
    ## This item, because it has no period, will be considered part of
the preceding note. It will not be interpreted as a separate Note Body
for auto-numbering.
]]

   If you decide to use the in-line form of Note Blocks,[##] the first
[[ ##. The in-line style looks like this. ]]
space after the "[[" is optional, and your numbered references will STILL
appear flush left in the endnote section. However, if there is more than
one space after the "[[" marker, the additional space will be copied over
into the endnote section. Something to remember or experiment with.

   If you have multiple notes inside a Note Block, you can omit or keep
blank lines between the notes. In other words, the following forms will
produce identical output:

   {{
   ##. No blank lines between the Note Bodies.
   ##. As you can see here.
   }}

   {{
   ##. Blank lines between notes in a Note Block are ignored.

   ##. Whether you keep them or not, it doesn't matter in the output.
   }}

   When Note Blocks are collected and formatted, by default one blank
line is be inserted between each note, even if there are no blank lines
in the Note Block itself. (This default can be changed.)

   What if your notes contain several long paragraphs? Will they be
stripped out or tampered with?

   No. Within each individual note (from the first line to the last line
of each note), internal blank lines are kept. Only blank lines *between*
notes are affected. Blank lines *within* a note are not affected.

   Within a Note Block, ENDNOTE also supports nonprinting comment lines.
If a line begins with ".." or "??" or "%" as the first character on the
line, that line is not printed. This allows writers to add comments to
themselves which do not appear in the output file.

[[
.. ------------------------------------------------
..   A Note Block can consist of nothing but 
..   comments. Use this to remind yourself to
..   confirm a dubious statement or spelling.
..
..   Nonprinting comments MUST occur within
..   Note Blocks, at least for right now.
.. -------------------------------------------------
]]

C. Details on Note Markers
--------------------------

   Note Markers may go directly after a word, like this[##], or there can 
be a space before the Note Marker, like this. [##]

[[
##. Having no space before a Note Marker keeps bracketed references from
"wrapping" and floating to the left margin if a paragraph is reformatted.

##. Having one space before a Note Marker sometimes looks better. But if
you're not watching, the Note Marker will "wrap" to the left margin during
paragraph reformatting.
]]

   ENDNOTE performs a single pass down the document, formatting and
counting as it goes along. Therefore, it doesn't "know" until it reaches
the end of file whether the number of Note Markers equals the number of
Note Bodies for the "Endnotes" section.

   If there is a discrepancy between the number of Note Markers and the
number of Note Bodies, ENDNOTE issues an explanatory error message and
quits. (This action can overridden by an option switch.)

   If there is no mismatch, ENDNOTE prints this section header:

      ---------
      ENDNOTES:

followed by the collected series of Note Bodies, which have been
automatically numbered. The "[[" and "]]" markers are discarded.

D. Option switches
------------------

   The following options are available. The syntax differs depending on
whether you are using awk or perl to run ENDNOTE. The switch names and
functions, however, are the same.

D.1. Define the string for Note Markers

   By default, Note Markers in the text are indicated by 1 to 4 pound
signs in square brackets. You may use something simpler and omit the
square brackets. The switch `alt_nm` (for "alternate note marker")
defines a different string to produce incrementing numbers. You can use
an asterisk, which will be interpreted as a literal character.

D.2. Omit blank lines between notes

   By default, one blank line is automatically inserted after each Note
Body. If you want `ssnotes` (single-spaced notes), add this option switch
to omit the blank line.

D.3. Define the starting note number

   By default, note numbering always begins with 1. If you split a
document into multiple parts and want the notes for Part 2 to continue
where Part 1 ended, ENDNOTE has a switch named `start` to begin numbering
at any integer.

D.4. Ignore mismatch between Note Markers and Note Bodies

   By default, ENDNOTE halts if the number of Note Bodies does not equal
the number of Note Markers. A switch named `ignore_errors` causes ENDNOTE
to ignore mismatched notes in the body and the endnote section, printing
the notes "as is" without halting. This switch can be helpful if you need
to print a working draft and you don't care about mismatched notes.

   This switch is also useful if you simply need to number items in a
list. Suppose you want to create a list of items beginning with asterisk,
and you want to organize it freely, and number the list when you're done.
Set `alt_nm` to a simple string like '*', set the `ignore_errors` switch,
and ENDNOTE will replace each asterisk with an incrementing number.

E. Running ENDNOTE with Awk
---------------------------

   You must have awk or perl to run ENDNOTE. If you are *only* interested
in using ENDNOTE and have neither, awk is easier to install and learn.

   Awk is installed by putting one or a few files somewhere on the PATH
where Windows can find it. ENDNOTE will run under GNU awk (gawk.exe) or
Michael Brennan's awk (mawk.exe).[##] If you have neither one, GNU awk is
a better choice than mawk because gawk has better internal help, gives
helpful error messages, and has ongoing development and bug fixes.

[[
##. Recommended sites for gawk and mawk, precompiled for Windows:
http://vkiefel.de/compiled-SW.html - has gawk 5.3 and mawk 
https://sf.net/projects/ezwinports/files/ - latest gawk-5.2*-bin.zip
https://klabaster.com/freeware.htm  - both gawk 4.4.4 and mawk here
https://delorie.com/djgpp/dl/ofc/dlfiles.cgi/current/v2gnu/ - gwk500b.zip

GNU awk (gawk) is included with the Unix toolkit in Git For Windows at
https://gitforwindows.org. It is also included by default with Cygwin.

ENDNOTE should run without errors under BWK awk, "The One True Awk".
Uncompiled source code is at https://github.com/onetrueawk/awk
]]

   ENDNOTE for awk is available from http://www.pement.org/awk.htm

   The syntax for the awk version of ENDNOTE is:

   awk [-options] -f endnote.awk source_file >output_file

SWITCH PLACEMENT. Note that if options are used, option switches must
occur before the -f switch. Each option requires a separate -v switch.

  Options:
    -v alt_nm='str'     # use 'str' (literal) as an alternate note marker
    -v ignore_errors=1  # ignore mismatched numbering in endnotes
    -v ssnotes=1        # omit blank line between notes (default: 1 line)
    -v start=n          # start numbering at 'n' instead of 1

Example: to use the first two options, where the alternate Note Marker
string will be a single asterisk, use this syntax in Unix:

   awk -v alt_nm='*' -v ignore_errors=1 -f endnote.awk infile >outfile

In Windows, replace the single quotes with double quotes:

   awk -v alt_nm="*" -v ignore_errors=1 -f endnote.awk infile >outfile

F. Running ENDNOTE with Perl
----------------------------

   Perl is a high-powered programming and "glue" language that is a
favorite for programmers and sysadmins. The latest version is easy to
find.[##] If you're running Unix, Linux, or Mac OS X, perl is already
installed. If you have installed Git for Windows, or Cmder, or Laragon,
or XAMPP, perl is installed by default. If you have Cygwin, perl is not
installed by default, but it is easily added by the Cygwin setup program.

[[
##. Recommended sites for perl:
 http://www.strawberryperl.com - for Windows
 http://www.activestate.com/activeperl/ - free and commercial versions
 http://www.perl.org/get.html - for Unix/Linux, Mac OS X, Windows
]]

   ENDNOTE for perl is available from http://www.pement.org/perl.htm
Additional documentation for ENDNOTE for perl is available by running the
command "perldoc [/your/path/to/]endnote.pl" from a shell prompt.

   The syntax for the perl version of ENDNOTE is:

   endnote.pl [-options] source.txt >output.txt

Switch placement. Note that if any options are used, the -s must also be
present. The -s must come *before* the script name ("endnote.pl"), but
the options (prefixed with a hyphen) must come *after* the script name.

  Options:
    -alt_nm='str'   # use 'str' (literal) as an alternate note marker
    -ignore_errors  # ignore mismatched numbering in endnotes
    -ssnotes        # omit blank line between notes (default: 1 line)
    -start='n'      # start numbering at 'n' instead of 1

G. Acknowledgements
-------------------

   The idea for ENDNOTE was taken from "wsNOTE" by Eric Meyer, the author
of VDE (a 16-bit DOS text editor, now freeware).[##] wsNOTE was a CP/M
and DOS utility for handling footnotes and endnotes in WordStar files,
when WordStar supported neither.[##] wsNOTE generated WordStar-specific
output. I adopted his system to perform a similar task with plain text,
but my system is only for endnotes, not footnotes.

[[
##. Download VDE from https://archive.org/details/vde-197

##. Documentation for wsNOTE is currently at
http://df.lth.se/~pi/cpm/files/ftp.mayn.de/pub/cpm/archive/wstar/wsnot134/wsnote.doc.txt
]]

-- 
The ENDNOTE perl and awk scripts were first written in 2002, while I was
a student at North Park University (Chicago).

[[
%  Of related interest, see http://spec-ops.github.io/html-note
]]
